**Graph representation**: Graph represented as a Adjacency List	**Graph representation**: Graph represented as an Adjacency Matrix	**Describe the data structure** you used to implement the graph and **why**? : described and justified	**Describe the data structure** you used to implement the graph and **why**? : missing description and justification	**Describe the data structure** you used to implement the graph and **why**? : missing justification	**Describe the data structure** you used to implement the graph and **why**? : Incorrect information in justification	**Describe the data structure** you used to implement the graph and **why**? : Vague justification	**Describe the data structure** you used to implement the graph and **why**? : Vague description	**Describe the data structure** you used to implement the graph and **why**? : Vague justification and description	**Describe the data structure** you used to implement the graph and **why**? : Missing description	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: Time complexity analysis meets expectations	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: missing variables descriptions	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: missing justification	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: all complexities missing or incorrect	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: 1 wrong time complexity	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: 2 wrong time complexities	**Time complexity analysis** - **Functions** - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification.: Complexities can be further simplified	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: Time complexity analysis meets expectations	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: missing variables descriptions	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: missing justification	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: complexity incorrect	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: can be further simplified	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: complexity stated is less than theoretical minimum or does not match the code logic	**Time complexity analysis** - **Main** method - What is the computational complexity of each method in the worst case? - 1.67 points for correct complexity, 1.67 for describing variables and 1.67 for justification. Note that the theoretical minimum is $$ \Omega(pV^2)  $$ or $$ \Omega(pE)  $$: Missing main function complexity analysis 	**Reflection on learning: **What did you learn from this assignment and what would you do differently if you had to start over?: Reflection meets expectations	**Reflection on learning: **What did you learn from this assignment and what would you do differently if you had to start over?: Missing reflection 	**Reflection on learning: **What did you learn from this assignment and what would you do differently if you had to start over?: Reflection too shallow or less than 2 sentences	**Code Style and Design **: Code quality meets expectations	**Code Style and Design **: Too few comments	**Code Style and Design **: Program still contains commented out code, could be cleaned up	**Code Style and Design **: inadequate commenting or no comments present in the code	**Code Style and Design **: inconsistent whitespace	**Code Style and Design **: naming conventions have some room for improvement	**Code Style and Design **: naming conventions are inconsistent	**Code Style and Design **: Code could be slightly more modular	**Code Style and Design **: code modularity has room for improvement	**Code Style and Design **: No modularization at all. The entire project is completed in the main method.	**Code Style and Design **: Missing code submission	**Code Style and Design **: Memory leaks	**Bonus catch tests**: 5 catch test cases **are provided**	**Bonus catch tests**: 5 catch test cases **are not provided** 	**Bonus catch tests**: only 1 test case provided	**Bonus catch tests**: only 2 test cases provided	**Bonus catch tests**: only 3 test cases provided	**Bonus catch tests**: only 4 test cases provided